;// I/O Registers definitions
;#include <io.h>
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;unsigned int DAQ_data = 0;
;float f_DAQ_data = 0;
;unsigned char start_byte=0xAA;
;unsigned char stop_byte=0xBB;
; int flag;
;char requ_buffer[14];
;#define packet_size_request     12
;unsigned int data_recieved;
;unsigned int packet_start;
;unsigned int DAC_data;
;
;// Declare your global variables here
;void dacb_write(unsigned char ch, unsigned int data);
;// System Clocks initialization
;void system_clocks_init(void)
; 0000 0016 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0000 0017 unsigned char n,s;
; 0000 0018 
; 0000 0019 // Optimize for speed
; 0000 001A #pragma optsize-
; 0000 001B // Save interrupts enabled/disabled state
; 0000 001C s=SREG;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;	n -> R17
;	s -> R16
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
; 0000 001D // Disable interrupts
; 0000 001E #asm("cli")
;PCODE: $00000006 VOL: 0
	cli
;PCODE: $00000007 VOL: 0
; 0000 001F 
; 0000 0020 // Internal 32 MHz RC oscillator initialization
; 0000 0021 // Enable the internal 32 MHz RC oscillator
; 0000 0022 OSC.CTRL|=OSC_RC32MEN_bm;
;PCODE: $00000008 VOL: 1
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 1
; 0000 0023 
; 0000 0024 // System Clock prescaler A division factor: 1
; 0000 0025 // System Clock prescalers B & C division factors: B:1, C:1
; 0000 0026 // ClkPer4: 32000.000 kHz
; 0000 0027 // ClkPer2: 32000.000 kHz
; 0000 0028 // ClkPer:  32000.000 kHz
; 0000 0029 // ClkCPU:  32000.000 kHz
; 0000 002A n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
; 0000 002B 	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
;PCODE: $0000000B VOL: 1
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002C CCP=CCP_IOREG_gc;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002D CLK.PSCTRL=n;
;PCODE: $00000012 VOL: 1
;PCODE: $00000013 VOL: 0
; 0000 002E 
; 0000 002F // Disable the auto-calibration of the internal 32 MHz RC oscillator
; 0000 0030 DFLLRC32M.CTRL&= ~DFLL_ENABLE_bm;
;PCODE: $00000014 VOL: 1
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 1
; 0000 0031 
; 0000 0032 // Wait for the internal 32 MHz RC oscillator to stabilize
; 0000 0033 while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 1
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034 
; 0000 0035 // Select the system clock source: 32 MHz Internal RC Osc.
; 0000 0036 n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
;PCODE: $0000001D VOL: 1
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0037 CCP=CCP_IOREG_gc;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0038 CLK.CTRL=n;
;PCODE: $00000023 VOL: 1
;PCODE: $00000024 VOL: 0
; 0000 0039 
; 0000 003A // Disable the unused oscillators: 2 MHz, internal 32 kHz, external clock/crystal oscillator, PLL
; 0000 003B OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 1
; 0000 003C 
; 0000 003D // ClkPer output disabled
; 0000 003E PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
;PCODE: $00000028 VOL: 1
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 1
; 0000 003F // Restore interrupts enabled/disabled state
; 0000 0040 SREG=s;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0041 // Restore optimization for size if needed
; 0000 0042 #pragma optsize_default
; 0000 0043 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;// Event System initialization
;void event_system_init(void)
; 0000 0047 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0048 // Event System Channel 0 source: None
; 0000 0049 EVSYS.CH0MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 1
; 0000 004A // Event System Channel 1 source: None
; 0000 004B EVSYS.CH1MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 1
; 0000 004C // Event System Channel 2 source: None
; 0000 004D EVSYS.CH2MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
; 0000 004E // Event System Channel 3 source: None
; 0000 004F EVSYS.CH3MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 1
; 0000 0050 // Event System Channel 4 source: None
; 0000 0051 EVSYS.CH4MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 1
; 0000 0052 // Event System Channel 5 source: None
; 0000 0053 EVSYS.CH5MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 1
; 0000 0054 // Event System Channel 6 source: None
; 0000 0055 EVSYS.CH6MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 1
; 0000 0056 // Event System Channel 7 source: None
; 0000 0057 EVSYS.CH7MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 1
; 0000 0058 
; 0000 0059 // Event System Channel 0 Digital Filter Coefficient: 1 Sample
; 0000 005A // Quadrature Decoder: Off
; 0000 005B EVSYS.CH0CTRL=(EVSYS.CH0CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 005C 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000042 VOL: 1
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 1
; 0000 005D // Event System Channel 1 Digital Filter Coefficient: 1 Sample
; 0000 005E EVSYS.CH1CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 1
; 0000 005F // Event System Channel 2 Digital Filter Coefficient: 1 Sample
; 0000 0060 // Quadrature Decoder: Off
; 0000 0061 EVSYS.CH2CTRL=(EVSYS.CH2CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 0062 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000048 VOL: 1
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 1
; 0000 0063 // Event System Channel 3 Digital Filter Coefficient: 1 Sample
; 0000 0064 EVSYS.CH3CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 1
; 0000 0065 // Event System Channel 4 Digital Filter Coefficient: 1 Sample
; 0000 0066 // Quadrature Decoder: Off
; 0000 0067 EVSYS.CH4CTRL=(EVSYS.CH4CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 0068 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000004E VOL: 1
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 1
; 0000 0069 // Event System Channel 5 Digital Filter Coefficient: 1 Sample
; 0000 006A EVSYS.CH5CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
; 0000 006B // Event System Channel 6 Digital Filter Coefficient: 1 Sample
; 0000 006C EVSYS.CH6CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 1
; 0000 006D // Event System Channel 7 Digital Filter Coefficient: 1 Sample
; 0000 006E EVSYS.CH7CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 1
; 0000 006F 
; 0000 0070 // Event System Channel output: Disabled
; 0000 0071 PORTCFG.CLKEVOUT&= ~PORTCFG_EVOUT_gm;
;PCODE: $00000058 VOL: 1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 1
; 0000 0072 PORTCFG.EVOUTSEL&= ~PORTCFG_EVOUTSEL_gm;
;PCODE: $0000005B VOL: 1
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 1
; 0000 0073 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;// Ports initialization
;void ports_init(void)
; 0000 0077 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0078 // PORTA initialization
; 0000 0079 // OUT register
; 0000 007A PORTA.OUT=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
; 0000 007B // Pin0: Input
; 0000 007C // Pin1: Input
; 0000 007D // Pin2: Input
; 0000 007E // Pin3: Input
; 0000 007F // Pin4: Input
; 0000 0080 // Pin5: Input
; 0000 0081 // Pin6: Input
; 0000 0082 // Pin7: Input
; 0000 0083 PORTA.DIR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 1
; 0000 0084 // Pin0 Output/Pull configuration: Totempole/No
; 0000 0085 // Pin0 Input/Sense configuration: Sense both edges
; 0000 0086 // Pin0 Inverted: Off
; 0000 0087 // Pin0 Slew Rate Limitation: Off
; 0000 0088 PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 1
; 0000 0089 // Pin1 Output/Pull configuration: Totempole/No
; 0000 008A // Pin1 Input/Sense configuration: Sense both edges
; 0000 008B // Pin1 Inverted: Off
; 0000 008C // Pin1 Slew Rate Limitation: Off
; 0000 008D PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 1
; 0000 008E // Pin2 Output/Pull configuration: Totempole/No
; 0000 008F // Pin2 Input/Sense configuration: Sense both edges
; 0000 0090 // Pin2 Inverted: Off
; 0000 0091 // Pin2 Slew Rate Limitation: Off
; 0000 0092 PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 0093 // Pin3 Output/Pull configuration: Totempole/No
; 0000 0094 // Pin3 Input/Sense configuration: Sense both edges
; 0000 0095 // Pin3 Inverted: Off
; 0000 0096 // Pin3 Slew Rate Limitation: Off
; 0000 0097 PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 1
; 0000 0098 // Pin4 Output/Pull configuration: Totempole/No
; 0000 0099 // Pin4 Input/Sense configuration: Sense both edges
; 0000 009A // Pin4 Inverted: Off
; 0000 009B // Pin4 Slew Rate Limitation: Off
; 0000 009C PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 1
; 0000 009D // Pin5 Output/Pull configuration: Totempole/No
; 0000 009E // Pin5 Input/Sense configuration: Sense both edges
; 0000 009F // Pin5 Inverted: Off
; 0000 00A0 // Pin5 Slew Rate Limitation: Off
; 0000 00A1 PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 1
; 0000 00A2 // Pin6 Output/Pull configuration: Totempole/No
; 0000 00A3 // Pin6 Input/Sense configuration: Sense both edges
; 0000 00A4 // Pin6 Inverted: Off
; 0000 00A5 // Pin6 Slew Rate Limitation: Off
; 0000 00A6 PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 1
; 0000 00A7 // Pin7 Output/Pull configuration: Totempole/No
; 0000 00A8 // Pin7 Input/Sense configuration: Sense both edges
; 0000 00A9 // Pin7 Inverted: Off
; 0000 00AA // Pin7 Slew Rate Limitation: Off
; 0000 00AB PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 1
; 0000 00AC // Interrupt 0 level: Disabled
; 0000 00AD // Interrupt 1 level: Disabled
; 0000 00AE PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 00AF     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000076 VOL: 1
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
; 0000 00B0 // Pin0 Pin Change interrupt 0: Off
; 0000 00B1 // Pin1 Pin Change interrupt 0: Off
; 0000 00B2 // Pin2 Pin Change interrupt 0: Off
; 0000 00B3 // Pin3 Pin Change interrupt 0: Off
; 0000 00B4 // Pin4 Pin Change interrupt 0: Off
; 0000 00B5 // Pin5 Pin Change interrupt 0: Off
; 0000 00B6 // Pin6 Pin Change interrupt 0: Off
; 0000 00B7 // Pin7 Pin Change interrupt 0: Off
; 0000 00B8 PORTA.INT0MASK=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 1
; 0000 00B9 // Pin0 Pin Change interrupt 1: Off
; 0000 00BA // Pin1 Pin Change interrupt 1: Off
; 0000 00BB // Pin2 Pin Change interrupt 1: Off
; 0000 00BC // Pin3 Pin Change interrupt 1: Off
; 0000 00BD // Pin4 Pin Change interrupt 1: Off
; 0000 00BE // Pin5 Pin Change interrupt 1: Off
; 0000 00BF // Pin6 Pin Change interrupt 1: Off
; 0000 00C0 // Pin7 Pin Change interrupt 1: Off
; 0000 00C1 PORTA.INT1MASK=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 1
; 0000 00C2 
; 0000 00C3 // PORTB initialization
; 0000 00C4 // OUT register
; 0000 00C5 PORTB.OUT=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 1
; 0000 00C6 // Pin0: Input
; 0000 00C7 // Pin1: Input
; 0000 00C8 // Pin2: Input
; 0000 00C9 // Pin3: Input
; 0000 00CA // Pin4: Input
; 0000 00CB // Pin5: Input
; 0000 00CC // Pin6: Input
; 0000 00CD // Pin7: Input
; 0000 00CE PORTB.DIR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 1
; 0000 00CF // Pin0 Output/Pull configuration: Totempole/No
; 0000 00D0 // Pin0 Input/Sense configuration: Sense both edges
; 0000 00D1 // Pin0 Inverted: Off
; 0000 00D2 // Pin0 Slew Rate Limitation: Off
; 0000 00D3 PORTB.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 1
; 0000 00D4 // Pin1 Output/Pull configuration: Totempole/No
; 0000 00D5 // Pin1 Input/Sense configuration: Sense both edges
; 0000 00D6 // Pin1 Inverted: Off
; 0000 00D7 // Pin1 Slew Rate Limitation: Off
; 0000 00D8 PORTB.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 1
; 0000 00D9 // Pin2 Output/Pull configuration: Totempole/No
; 0000 00DA // Pin2 Input/Sense configuration: Sense both edges
; 0000 00DB // Pin2 Inverted: Off
; 0000 00DC // Pin2 Slew Rate Limitation: Off
; 0000 00DD PORTB.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 1
; 0000 00DE // Pin3 Output/Pull configuration: Totempole/No
; 0000 00DF // Pin3 Input/Sense configuration: Sense both edges
; 0000 00E0 // Pin3 Inverted: Off
; 0000 00E1 // Pin3 Slew Rate Limitation: Off
; 0000 00E2 PORTB.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 1
; 0000 00E3 // Pin4 Output/Pull configuration: Totempole/No
; 0000 00E4 // Pin4 Input/Sense configuration: Sense both edges
; 0000 00E5 // Pin4 Inverted: Off
; 0000 00E6 // Pin4 Slew Rate Limitation: Off
; 0000 00E7 PORTB.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 1
; 0000 00E8 // Pin5 Output/Pull configuration: Totempole/No
; 0000 00E9 // Pin5 Input/Sense configuration: Sense both edges
; 0000 00EA // Pin5 Inverted: Off
; 0000 00EB // Pin5 Slew Rate Limitation: Off
; 0000 00EC PORTB.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 1
; 0000 00ED // Pin6 Output/Pull configuration: Totempole/No
; 0000 00EE // Pin6 Input/Sense configuration: Sense both edges
; 0000 00EF // Pin6 Inverted: Off
; 0000 00F0 // Pin6 Slew Rate Limitation: Off
; 0000 00F1 PORTB.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 1
; 0000 00F2 // Pin7 Output/Pull configuration: Totempole/No
; 0000 00F3 // Pin7 Input/Sense configuration: Sense both edges
; 0000 00F4 // Pin7 Inverted: Off
; 0000 00F5 // Pin7 Slew Rate Limitation: Off
; 0000 00F6 PORTB.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 1
; 0000 00F7 // Interrupt 0 level: Disabled
; 0000 00F8 // Interrupt 1 level: Disabled
; 0000 00F9 PORTB.INTCTRL=(PORTB.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 00FA     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000093 VOL: 1
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 1
; 0000 00FB // Pin0 Pin Change interrupt 0: Off
; 0000 00FC // Pin1 Pin Change interrupt 0: Off
; 0000 00FD // Pin2 Pin Change interrupt 0: Off
; 0000 00FE // Pin3 Pin Change interrupt 0: Off
; 0000 00FF // Pin4 Pin Change interrupt 0: Off
; 0000 0100 // Pin5 Pin Change interrupt 0: Off
; 0000 0101 // Pin6 Pin Change interrupt 0: Off
; 0000 0102 // Pin7 Pin Change interrupt 0: Off
; 0000 0103 PORTB.INT0MASK=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 1
; 0000 0104 // Pin0 Pin Change interrupt 1: Off
; 0000 0105 // Pin1 Pin Change interrupt 1: Off
; 0000 0106 // Pin2 Pin Change interrupt 1: Off
; 0000 0107 // Pin3 Pin Change interrupt 1: Off
; 0000 0108 // Pin4 Pin Change interrupt 1: Off
; 0000 0109 // Pin5 Pin Change interrupt 1: Off
; 0000 010A // Pin6 Pin Change interrupt 1: Off
; 0000 010B // Pin7 Pin Change interrupt 1: Off
; 0000 010C PORTB.INT1MASK=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 1
; 0000 010D 
; 0000 010E // PORTC initialization
; 0000 010F // OUT register
; 0000 0110 PORTC.OUT=0x04;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 1
; 0000 0111 // Pin0: Output
; 0000 0112 // Pin1: Output
; 0000 0113 // Pin2: Output
; 0000 0114 // Pin3: Input
; 0000 0115 // Pin4: Input
; 0000 0116 // Pin5: Input
; 0000 0117 // Pin6: Input
; 0000 0118 // Pin7: Input
; 0000 0119 PORTC.DIR=0x07;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 1
; 0000 011A // Pin0 Output/Pull configuration: Totempole/No
; 0000 011B // Pin0 Input/Sense configuration: Sense both edges
; 0000 011C // Pin0 Inverted: Off
; 0000 011D // Pin0 Slew Rate Limitation: Off
; 0000 011E PORTC.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 1
; 0000 011F // Pin1 Output/Pull configuration: Totempole/No
; 0000 0120 // Pin1 Input/Sense configuration: Sense both edges
; 0000 0121 // Pin1 Inverted: Off
; 0000 0122 // Pin1 Slew Rate Limitation: Off
; 0000 0123 PORTC.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 1
; 0000 0124 // Pin2 Output/Pull configuration: Totempole/No
; 0000 0125 // Pin2 Input/Sense configuration: Sense both edges
; 0000 0126 // Pin2 Inverted: Off
; 0000 0127 // Pin2 Slew Rate Limitation: Off
; 0000 0128 PORTC.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 1
; 0000 0129 // Pin3 Output/Pull configuration: Totempole/No
; 0000 012A // Pin3 Input/Sense configuration: Sense both edges
; 0000 012B // Pin3 Inverted: Off
; 0000 012C // Pin3 Slew Rate Limitation: Off
; 0000 012D PORTC.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 1
; 0000 012E // Pin4 Output/Pull configuration: Totempole/No
; 0000 012F // Pin4 Input/Sense configuration: Sense both edges
; 0000 0130 // Pin4 Inverted: Off
; 0000 0131 // Pin4 Slew Rate Limitation: Off
; 0000 0132 PORTC.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 1
; 0000 0133 // Pin5 Output/Pull configuration: Totempole/No
; 0000 0134 // Pin5 Input/Sense configuration: Sense both edges
; 0000 0135 // Pin5 Inverted: Off
; 0000 0136 // Pin5 Slew Rate Limitation: Off
; 0000 0137 PORTC.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 1
; 0000 0138 // Pin6 Output/Pull configuration: Totempole/No
; 0000 0139 // Pin6 Input/Sense configuration: Sense both edges
; 0000 013A // Pin6 Inverted: Off
; 0000 013B // Pin6 Slew Rate Limitation: Off
; 0000 013C PORTC.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 1
; 0000 013D // Pin7 Output/Pull configuration: Totempole/No
; 0000 013E // Pin7 Input/Sense configuration: Sense both edges
; 0000 013F // Pin7 Inverted: Off
; 0000 0140 // Pin7 Slew Rate Limitation: Off
; 0000 0141 PORTC.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 1
; 0000 0142 // PORTC Peripheral Output Remapping
; 0000 0143 // OC0A Output: Pin 0
; 0000 0144 // OC0B Output: Pin 1
; 0000 0145 // OC0C Output: Pin 2
; 0000 0146 // OC0D Output: Pin 3
; 0000 0147 // USART0 XCK: Pin 1
; 0000 0148 // USART0 RXD: Pin 2
; 0000 0149 // USART0 TXD: Pin 3
; 0000 014A // SPI MOSI: Pin 5
; 0000 014B // SPI SCK: Pin 7
; 0000 014C PORTC.REMAP=(0<<PORT_SPI_bp) | (0<<PORT_USART0_bp) | (0<<PORT_TC0D_bp) | (0<<PORT_TC0C_bp) | (0<<PORT_TC0B_bp) | (0<<POR ...
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 1
; 0000 014D // Interrupt 0 level: Disabled
; 0000 014E // Interrupt 1 level: Disabled
; 0000 014F PORTC.INTCTRL=(PORTC.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0150     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000B2 VOL: 1
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 1
; 0000 0151 // Pin0 Pin Change interrupt 0: Off
; 0000 0152 // Pin1 Pin Change interrupt 0: Off
; 0000 0153 // Pin2 Pin Change interrupt 0: Off
; 0000 0154 // Pin3 Pin Change interrupt 0: Off
; 0000 0155 // Pin4 Pin Change interrupt 0: Off
; 0000 0156 // Pin5 Pin Change interrupt 0: Off
; 0000 0157 // Pin6 Pin Change interrupt 0: Off
; 0000 0158 // Pin7 Pin Change interrupt 0: Off
; 0000 0159 PORTC.INT0MASK=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 1
; 0000 015A // Pin0 Pin Change interrupt 1: Off
; 0000 015B // Pin1 Pin Change interrupt 1: Off
; 0000 015C // Pin2 Pin Change interrupt 1: Off
; 0000 015D // Pin3 Pin Change interrupt 1: Off
; 0000 015E // Pin4 Pin Change interrupt 1: Off
; 0000 015F // Pin5 Pin Change interrupt 1: Off
; 0000 0160 // Pin6 Pin Change interrupt 1: Off
; 0000 0161 // Pin7 Pin Change interrupt 1: Off
; 0000 0162 PORTC.INT1MASK=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 1
; 0000 0163 
; 0000 0164 // PORTD initialization
; 0000 0165 // OUT register
; 0000 0166 PORTD.OUT=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 1
; 0000 0167 // Pin0: Input
; 0000 0168 // Pin1: Input
; 0000 0169 // Pin2: Input
; 0000 016A // Pin3: Input
; 0000 016B // Pin4: Output
; 0000 016C // Pin5: Output
; 0000 016D // Pin6: Output
; 0000 016E // Pin7: Output
; 0000 016F PORTD.DIR=0xF0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 1
; 0000 0170 // Pin0 Output/Pull configuration: Totempole/No
; 0000 0171 // Pin0 Input/Sense configuration: Sense both edges
; 0000 0172 // Pin0 Inverted: Off
; 0000 0173 // Pin0 Slew Rate Limitation: Off
; 0000 0174 PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 1
; 0000 0175 // Pin1 Output/Pull configuration: Totempole/No
; 0000 0176 // Pin1 Input/Sense configuration: Sense both edges
; 0000 0177 // Pin1 Inverted: Off
; 0000 0178 // Pin1 Slew Rate Limitation: Off
; 0000 0179 PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 1
; 0000 017A // Pin2 Output/Pull configuration: Totempole/No
; 0000 017B // Pin2 Input/Sense configuration: Sense both edges
; 0000 017C // Pin2 Inverted: Off
; 0000 017D // Pin2 Slew Rate Limitation: Off
; 0000 017E PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 1
; 0000 017F // Pin3 Output/Pull configuration: Totempole/No
; 0000 0180 // Pin3 Input/Sense configuration: Sense both edges
; 0000 0181 // Pin3 Inverted: Off
; 0000 0182 // Pin3 Slew Rate Limitation: Off
; 0000 0183 PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 1
; 0000 0184 // Pin4 Output/Pull configuration: Totempole/No
; 0000 0185 // Pin4 Input/Sense configuration: Sense both edges
; 0000 0186 // Pin4 Inverted: Off
; 0000 0187 // Pin4 Slew Rate Limitation: Off
; 0000 0188 PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 1
; 0000 0189 // Pin5 Output/Pull configuration: Totempole/No
; 0000 018A // Pin5 Input/Sense configuration: Sense both edges
; 0000 018B // Pin5 Inverted: Off
; 0000 018C // Pin5 Slew Rate Limitation: Off
; 0000 018D PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 1
; 0000 018E // Pin6 Output/Pull configuration: Totempole/No
; 0000 018F // Pin6 Input/Sense configuration: Sense both edges
; 0000 0190 // Pin6 Inverted: Off
; 0000 0191 // Pin6 Slew Rate Limitation: Off
; 0000 0192 PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 1
; 0000 0193 // Pin7 Output/Pull configuration: Totempole/No
; 0000 0194 // Pin7 Input/Sense configuration: Sense both edges
; 0000 0195 // Pin7 Inverted: Off
; 0000 0196 // Pin7 Slew Rate Limitation: Off
; 0000 0197 PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 1
; 0000 0198 // Interrupt 0 level: Disabled
; 0000 0199 // Interrupt 1 level: Disabled
; 0000 019A PORTD.INTCTRL=(PORTD.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 019B     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000CF VOL: 1
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 1
; 0000 019C // Pin0 Pin Change interrupt 0: Off
; 0000 019D // Pin1 Pin Change interrupt 0: Off
; 0000 019E // Pin2 Pin Change interrupt 0: Off
; 0000 019F // Pin3 Pin Change interrupt 0: Off
; 0000 01A0 // Pin4 Pin Change interrupt 0: Off
; 0000 01A1 // Pin5 Pin Change interrupt 0: Off
; 0000 01A2 // Pin6 Pin Change interrupt 0: Off
; 0000 01A3 // Pin7 Pin Change interrupt 0: Off
; 0000 01A4 PORTD.INT0MASK=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 1
; 0000 01A5 // Pin0 Pin Change interrupt 1: Off
; 0000 01A6 // Pin1 Pin Change interrupt 1: Off
; 0000 01A7 // Pin2 Pin Change interrupt 1: Off
; 0000 01A8 // Pin3 Pin Change interrupt 1: Off
; 0000 01A9 // Pin4 Pin Change interrupt 1: Off
; 0000 01AA // Pin5 Pin Change interrupt 1: Off
; 0000 01AB // Pin6 Pin Change interrupt 1: Off
; 0000 01AC // Pin7 Pin Change interrupt 1: Off
; 0000 01AD PORTD.INT1MASK=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 1
; 0000 01AE 
; 0000 01AF // PORTE initialization
; 0000 01B0 // OUT register
; 0000 01B1 PORTE.OUT=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 1
; 0000 01B2 // Pin0: Output
; 0000 01B3 // Pin1: Output
; 0000 01B4 // Pin2: Output
; 0000 01B5 // Pin3: Output
; 0000 01B6 // Pin4: Output
; 0000 01B7 // Pin5: Output
; 0000 01B8 // Pin6: Output
; 0000 01B9 // Pin7: Output
; 0000 01BA PORTE.DIR=0xFF;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 1
; 0000 01BB // Pin0 Output/Pull configuration: Totempole/No
; 0000 01BC // Pin0 Input/Sense configuration: Sense both edges
; 0000 01BD // Pin0 Inverted: Off
; 0000 01BE // Pin0 Slew Rate Limitation: Off
; 0000 01BF PORTE.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 1
; 0000 01C0 // Pin1 Output/Pull configuration: Totempole/No
; 0000 01C1 // Pin1 Input/Sense configuration: Sense both edges
; 0000 01C2 // Pin1 Inverted: Off
; 0000 01C3 // Pin1 Slew Rate Limitation: Off
; 0000 01C4 PORTE.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 1
; 0000 01C5 // Pin2 Output/Pull configuration: Totempole/No
; 0000 01C6 // Pin2 Input/Sense configuration: Sense both edges
; 0000 01C7 // Pin2 Inverted: Off
; 0000 01C8 // Pin2 Slew Rate Limitation: Off
; 0000 01C9 PORTE.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 1
; 0000 01CA // Pin3 Output/Pull configuration: Totempole/No
; 0000 01CB // Pin3 Input/Sense configuration: Sense both edges
; 0000 01CC // Pin3 Inverted: Off
; 0000 01CD // Pin3 Slew Rate Limitation: Off
; 0000 01CE PORTE.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 1
; 0000 01CF // Pin4 Output/Pull configuration: Totempole/No
; 0000 01D0 // Pin4 Input/Sense configuration: Sense both edges
; 0000 01D1 // Pin4 Inverted: Off
; 0000 01D2 // Pin4 Slew Rate Limitation: Off
; 0000 01D3 PORTE.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 1
; 0000 01D4 // Pin5 Output/Pull configuration: Totempole/No
; 0000 01D5 // Pin5 Input/Sense configuration: Sense both edges
; 0000 01D6 // Pin5 Inverted: Off
; 0000 01D7 // Pin5 Slew Rate Limitation: Off
; 0000 01D8 PORTE.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 1
; 0000 01D9 // Pin6 Output/Pull configuration: Totempole/No
; 0000 01DA // Pin6 Input/Sense configuration: Sense both edges
; 0000 01DB // Pin6 Inverted: Off
; 0000 01DC // Pin6 Slew Rate Limitation: Off
; 0000 01DD PORTE.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 1
; 0000 01DE // Pin7 Output/Pull configuration: Totempole/No
; 0000 01DF // Pin7 Input/Sense configuration: Sense both edges
; 0000 01E0 // Pin7 Inverted: Off
; 0000 01E1 // Pin7 Slew Rate Limitation: Off
; 0000 01E2 PORTE.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 1
; 0000 01E3 // Interrupt 0 level: Disabled
; 0000 01E4 // Interrupt 1 level: Disabled
; 0000 01E5 PORTE.INTCTRL=(PORTE.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 01E6     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000EC VOL: 1
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 1
; 0000 01E7 // Pin0 Pin Change interrupt 0: Off
; 0000 01E8 // Pin1 Pin Change interrupt 0: Off
; 0000 01E9 // Pin2 Pin Change interrupt 0: Off
; 0000 01EA // Pin3 Pin Change interrupt 0: Off
; 0000 01EB // Pin4 Pin Change interrupt 0: Off
; 0000 01EC // Pin5 Pin Change interrupt 0: Off
; 0000 01ED // Pin6 Pin Change interrupt 0: Off
; 0000 01EE // Pin7 Pin Change interrupt 0: Off
; 0000 01EF PORTE.INT0MASK=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 1
; 0000 01F0 // Pin0 Pin Change interrupt 1: Off
; 0000 01F1 // Pin1 Pin Change interrupt 1: Off
; 0000 01F2 // Pin2 Pin Change interrupt 1: Off
; 0000 01F3 // Pin3 Pin Change interrupt 1: Off
; 0000 01F4 // Pin4 Pin Change interrupt 1: Off
; 0000 01F5 // Pin5 Pin Change interrupt 1: Off
; 0000 01F6 // Pin6 Pin Change interrupt 1: Off
; 0000 01F7 // Pin7 Pin Change interrupt 1: Off
; 0000 01F8 PORTE.INT1MASK=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 1
; 0000 01F9 
; 0000 01FA // PORTF initialization
; 0000 01FB // OUT register
; 0000 01FC PORTF.OUT=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 1
; 0000 01FD // Pin0: Input
; 0000 01FE // Pin1: Input
; 0000 01FF // Pin2: Input
; 0000 0200 // Pin3: Output
; 0000 0201 // Pin4: Input
; 0000 0202 // Pin5: Input
; 0000 0203 // Pin6: Input
; 0000 0204 // Pin7: Input
; 0000 0205 PORTF.DIR=0x08;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 1
; 0000 0206 // Pin0 Output/Pull configuration: Totempole/No
; 0000 0207 // Pin0 Input/Sense configuration: Sense both edges
; 0000 0208 // Pin0 Inverted: Off
; 0000 0209 // Pin0 Slew Rate Limitation: Off
; 0000 020A PORTF.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 1
; 0000 020B // Pin1 Output/Pull configuration: Totempole/No
; 0000 020C // Pin1 Input/Sense configuration: Sense both edges
; 0000 020D // Pin1 Inverted: Off
; 0000 020E // Pin1 Slew Rate Limitation: Off
; 0000 020F PORTF.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 1
; 0000 0210 // Pin2 Output/Pull configuration: Totempole/No
; 0000 0211 // Pin2 Input/Sense configuration: Sense both edges
; 0000 0212 // Pin2 Inverted: Off
; 0000 0213 // Pin2 Slew Rate Limitation: Off
; 0000 0214 PORTF.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 1
; 0000 0215 // Pin3 Output/Pull configuration: Totempole/No
; 0000 0216 // Pin3 Input/Sense configuration: Sense both edges
; 0000 0217 // Pin3 Inverted: Off
; 0000 0218 // Pin3 Slew Rate Limitation: Off
; 0000 0219 PORTF.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 1
; 0000 021A // Pin4 Output/Pull configuration: Totempole/No
; 0000 021B // Pin4 Input/Sense configuration: Sense both edges
; 0000 021C // Pin4 Inverted: Off
; 0000 021D // Pin4 Slew Rate Limitation: Off
; 0000 021E PORTF.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 1
; 0000 021F // Pin5 Output/Pull configuration: Totempole/No
; 0000 0220 // Pin5 Input/Sense configuration: Sense both edges
; 0000 0221 // Pin5 Inverted: Off
; 0000 0222 // Pin5 Slew Rate Limitation: Off
; 0000 0223 PORTF.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 1
; 0000 0224 // Pin6 Output/Pull configuration: Totempole/No
; 0000 0225 // Pin6 Input/Sense configuration: Sense both edges
; 0000 0226 // Pin6 Inverted: Off
; 0000 0227 // Pin6 Slew Rate Limitation: Off
; 0000 0228 PORTF.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 1
; 0000 0229 // Pin7 Output/Pull configuration: Totempole/No
; 0000 022A // Pin7 Input/Sense configuration: Sense both edges
; 0000 022B // Pin7 Inverted: Off
; 0000 022C // Pin7 Slew Rate Limitation: Off
; 0000 022D PORTF.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 1
; 0000 022E // Interrupt 0 level: Disabled
; 0000 022F // Interrupt 1 level: Disabled
; 0000 0230 PORTF.INTCTRL=(PORTF.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0231 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000109 VOL: 1
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 1
; 0000 0232 // Pin0 Pin Change interrupt 0: Off
; 0000 0233 // Pin1 Pin Change interrupt 0: Off
; 0000 0234 // Pin2 Pin Change interrupt 0: Off
; 0000 0235 // Pin3 Pin Change interrupt 0: Off
; 0000 0236 // Pin4 Pin Change interrupt 0: Off
; 0000 0237 // Pin5 Pin Change interrupt 0: Off
; 0000 0238 // Pin6 Pin Change interrupt 0: Off
; 0000 0239 // Pin7 Pin Change interrupt 0: Off
; 0000 023A PORTF.INT0MASK=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 1
; 0000 023B // Pin0 Pin Change interrupt 1: Off
; 0000 023C // Pin1 Pin Change interrupt 1: Off
; 0000 023D // Pin2 Pin Change interrupt 1: Off
; 0000 023E // Pin3 Pin Change interrupt 1: Off
; 0000 023F // Pin4 Pin Change interrupt 1: Off
; 0000 0240 // Pin5 Pin Change interrupt 1: Off
; 0000 0241 // Pin6 Pin Change interrupt 1: Off
; 0000 0242 // Pin7 Pin Change interrupt 1: Off
; 0000 0243 PORTF.INT1MASK=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 1
; 0000 0244 
; 0000 0245 // PORTR initialization
; 0000 0246 // OUT register
; 0000 0247 PORTR.OUT=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 1
; 0000 0248 // Pin0: Input
; 0000 0249 // Pin1: Input
; 0000 024A PORTR.DIR=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 1
; 0000 024B // Pin0 Output/Pull configuration: Totempole/No
; 0000 024C // Pin0 Input/Sense configuration: Sense both edges
; 0000 024D // Pin0 Inverted: Off
; 0000 024E // Pin0 Slew Rate Limitation: Off
; 0000 024F PORTR.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 1
; 0000 0250 // Pin1 Output/Pull configuration: Totempole/No
; 0000 0251 // Pin1 Input/Sense configuration: Sense both edges
; 0000 0252 // Pin1 Inverted: Off
; 0000 0253 // Pin1 Slew Rate Limitation: Off
; 0000 0254 PORTR.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 1
; 0000 0255 // Interrupt 0 level: Disabled
; 0000 0256 // Interrupt 1 level: Disabled
; 0000 0257 PORTR.INTCTRL=(PORTR.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0258 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $0000011A VOL: 1
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 1
; 0000 0259 // Pin0 Pin Change interrupt 0: Off
; 0000 025A // Pin1 Pin Change interrupt 0: Off
; 0000 025B PORTR.INT0MASK=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 1
; 0000 025C // Pin0 Pin Change interrupt 1: Off
; 0000 025D // Pin1 Pin Change interrupt 1: Off
; 0000 025E PORTR.INT1MASK=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 1
; 0000 025F }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;
;// Virtual Ports initialization
;void vports_init(void)
; 0000 0263 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0264 // PORTA mapped to VPORT0
; 0000 0265 // PORTB mapped to VPORT1
; 0000 0266 PORTCFG.VPCTRLA=PORTCFG_VP13MAP_PORTB_gc | PORTCFG_VP02MAP_PORTA_gc;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 1
; 0000 0267 // PORTC mapped to VPORT2
; 0000 0268 // PORTD mapped to VPORT3
; 0000 0269 PORTCFG.VPCTRLB=PORTCFG_VP13MAP_PORTD_gc | PORTCFG_VP02MAP_PORTC_gc;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 1
; 0000 026A }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;
;// USARTF0 initialization
;void usartf0_init(void)
; 0000 026E {
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 026F // Note: The correct PORTF direction for the RxD, TxD and XCK signals
; 0000 0270 // is configured in the ports_init function.
; 0000 0271 
; 0000 0272 // Transmitter is enabled
; 0000 0273 // Set TxD=1
; 0000 0274 PORTF.OUTSET=0x08;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 1
; 0000 0275 
; 0000 0276 // Communication mode: Asynchronous USART
; 0000 0277 // Data bits: 8
; 0000 0278 // Stop bits: 1
; 0000 0279 // Parity: Disabled
; 0000 027A USARTF0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 1
; 0000 027B 
; 0000 027C // Receive complete interrupt: High Level
; 0000 027D // Transmit complete interrupt: Medium Level
; 0000 027E // Data register empty interrupt: Disabled
; 0000 027F USARTF0.CTRLA=(USARTF0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
; 0000 0280 	USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_MED_gc | USART_DREINTLVL_OFF_gc;
;PCODE: $00000133 VOL: 1
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 1
; 0000 0281 
; 0000 0282 // Required Baud rate: 115200
; 0000 0283 // Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
; 0000 0284 USARTF0.BAUDCTRLA=0x2E;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 1
; 0000 0285 USARTF0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x08;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 1
; 0000 0286 
; 0000 0287 // Receiver: On
; 0000 0288 // Transmitter: On
; 0000 0289 // Double transmission speed mode: Off
; 0000 028A // Multi-processor communication mode: Off
; 0000 028B USARTF0.CTRLB=(USARTF0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
; 0000 028C 	USART_RXEN_bm | USART_TXEN_bm;
;PCODE: $0000013C VOL: 1
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 1
; 0000 028D }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;
;// USARTF0 Receiver buffer
;#define RX_BUFFER_SIZE_USARTF0 64
;char rx_buffer_usartf0[RX_BUFFER_SIZE_USARTF0];
;
;#if RX_BUFFER_SIZE_USARTF0 <= 256
;unsigned char rx_wr_index_usartf0=0,rx_rd_index_usartf0=0;
;#else
;unsigned int rx_wr_index_usartf0=0,rx_rd_index_usartf0=0;
;#endif
;
;#if RX_BUFFER_SIZE_USARTF0 < 256
;unsigned char rx_counter_usartf0=0;
;#else
;unsigned int rx_counter_usartf0=0;
;#endif
;
;// This flag is set on USARTF0 Receiver buffer overflow
;bit rx_buffer_overflow_usartf0=0;
;
;// USARTF0 Receiver interrupt service routine
;interrupt [USARTF0_RXC_vect] void usartf0_rx_isr(void)
; 0000 02A4 {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 02A5 unsigned char status;
; 0000 02A6 char data;
; 0000 02A7 int data0,data1,data2;
; 0000 02A8 
; 0000 02A9 status=USARTF0.STATUS;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;	status -> R17
;	data -> R16
;	data0 -> R18,R19
;	data1 -> R20,R21
;	data2 -> Y+6
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 1
; 0000 02AA data=USARTF0.DATA;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 1
; 0000 02AB        /*
; 0000 02AC if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
; 0000 02AD    {
; 0000 02AE    rx_buffer_usartf0[rx_wr_index_usartf0++]=data;
; 0000 02AF    if(rx_wr_index_usartf0 == 5)
; 0000 02B0    {
; 0000 02B1    if(rx_buffer_usartf0[rx_wr_index_usartf0-5]=='A')
; 0000 02B2    {
; 0000 02B3    data0 = rx_buffer_usartf0[rx_wr_index_usartf0-4]-0x30;
; 0000 02B4    data1 = rx_buffer_usartf0[rx_wr_index_usartf0-3]-0x30;
; 0000 02B5    data2 = rx_buffer_usartf0[rx_wr_index_usartf0-2]-0x30;
; 0000 02B6 
; 0000 02B7    DAQ_data =  (data0*100) + ((data1)*10) + (data2);
; 0000 02B8    f_DAQ_data=(float)(DAQ_data*40.95);
; 0000 02B9    DAQ_data = (unsigned int) (f_DAQ_data);
; 0000 02BA    putchar (DAQ_data>>8);
; 0000 02BB    putchar (DAQ_data);
; 0000 02BC //   DAQ_data = 4095;
; 0000 02BD    rx_wr_index_usartf0=0;
; 0000 02BE    dacb_write(0,DAQ_data);
; 0000 02BF    }
; 0000 02C0    }
; 0000 02C1  //  putchar(rx_buffer_usartf0[(rx_wr_index_usartf0-1)]);
; 0000 02C2 #if RX_BUFFER_SIZE_USARTF0 == 256
; 0000 02C3    // special case for receiver buffer size=256
; 0000 02C4    if (++rx_counter_usartf0 == 0) rx_buffer_overflow_usartf0=1;
; 0000 02C5 #else
; 0000 02C6    if (rx_wr_index_usartf0 == RX_BUFFER_SIZE_USARTF0) rx_wr_index_usartf0=0;
; 0000 02C7    if (++rx_counter_usartf0 == RX_BUFFER_SIZE_USARTF0)
; 0000 02C8       {
; 0000 02C9       rx_counter_usartf0=0;
; 0000 02CA       rx_buffer_overflow_usartf0=1;
; 0000 02CB       }
; 0000 02CC #endif
; 0000 02CD    }*/
; 0000 02CE      if((data==start_byte)&&(packet_start==0))
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 02CF             {
; 0000 02D0             //packet start________________________________
; 0000 02D1             packet_start=1;                     //packet start
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 02D2             data_recieved = 0;                  //Byte Number Set
;PCODE: $00000155 VOL: 0
; 0000 02D3             requ_buffer[data_recieved]=data;  //Save data
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 02D4             data_recieved++;                    //Byte Number Set For next Byte
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 02D5             //____________________________________________
; 0000 02D6             }
; 0000 02D7         else if(packet_start==1)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 02D8             {
; 0000 02D9             //packet end__________________________________
; 0000 02DA             if ( (data_recieved==(packet_size_request-1))&&(data==stop_byte))
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 02DB                 {
; 0000 02DC                     packet_start=0;
;PCODE: $0000016B VOL: 0
; 0000 02DD                     requ_buffer[data_recieved]=data;  //Save data
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 02DE                     data_recieved++;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 02DF                     flag=1;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 02E0 
; 0000 02E1                 }
; 0000 02E2             //____________________________________________
; 0000 02E3 
; 0000 02E4             //packet not end dnf__________________________
; 0000 02E5             else if ( (data_recieved==(packet_size_request-1))&&(data!=stop_byte))
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 02E6                 {
; 0000 02E7                     packet_start=0;
;PCODE: $00000180 VOL: 0
; 0000 02E8                     data_recieved = 0;
;PCODE: $00000181 VOL: 0
; 0000 02E9                 }
; 0000 02EA             //____________________________________________
; 0000 02EB 
; 0000 02EC             //packet is ok yet__________________________
; 0000 02ED             else
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 02EE                 {
; 0000 02EF                 requ_buffer[data_recieved]=data;  //Save data
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 02F0                 data_recieved++;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 02F1                 }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 02F2             //________________________________putchar____________
; 0000 02F3             }
; 0000 02F4 
; 0000 02F5 
; 0000 02F6 }
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;
;// Receive a character from USARTF0
;// USARTF0 is used as the default input device by the 'getchar' function
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0000 02FE {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 02FF char data;
; 0000 0300 
; 0000 0301 while (rx_counter_usartf0==0);
;PCODE: $00000195 VOL: 0
;	data -> R17
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0302 data=rx_buffer_usartf0[rx_rd_index_usartf0++];
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0303 #if RX_BUFFER_SIZE_USARTF0 != 256
; 0000 0304 if (rx_rd_index_usartf0 == RX_BUFFER_SIZE_USARTF0) rx_rd_index_usartf0=0;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0305 #endif
; 0000 0306 #asm("cli")
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
	cli
;PCODE: $000001AA VOL: 0
; 0000 0307 --rx_counter_usartf0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0308 #asm("sei")
;PCODE: $000001AE VOL: 0
	sei
;PCODE: $000001AF VOL: 0
; 0000 0309 return data;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 030A }
;PCODE: $000001B3 VOL: 0
;#pragma used-
;
;// USARTF0 Transmitter buffer
;#define TX_BUFFER_SIZE_USARTF0 64
;char tx_buffer_usartf0[TX_BUFFER_SIZE_USARTF0];
;
;#if TX_BUFFER_SIZE_USARTF0 <= 256
;unsigned char tx_wr_index_usartf0=0,tx_rd_index_usartf0=0;
;#else
;unsigned int tx_wr_index_usartf0=0,tx_rd_index_usartf0=0;
;#endif
;
;#if TX_BUFFER_SIZE_USARTF0 < 256
;unsigned char tx_counter_usartf0=0;
;#else
;unsigned int tx_counter_usartf0=0;
;#endif
;
;// USARTF0 Transmitter interrupt service routine
;interrupt [USARTF0_TXC_vect] void usartf0_tx_isr(void)
; 0000 031F {
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0320 if (tx_counter_usartf0)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0321    {
; 0000 0322    --tx_counter_usartf0;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0323    USARTF0.DATA=tx_buffer_usartf0[tx_rd_index_usartf0++];
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 1
; 0000 0324 #if TX_BUFFER_SIZE_USARTF0 != 256
; 0000 0325    if (tx_rd_index_usartf0 == TX_BUFFER_SIZE_USARTF0) tx_rd_index_usartf0=0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0326 #endif
; 0000 0327    }
;PCODE: $000001C9 VOL: 0
; 0000 0328 }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;
;// Write a character to the USARTF0 Transmitter buffer
;// USARTF0 is used as the default output device by the 'putchar' function
;#define _ALTERNATE_PUTCHAR_
;
;#pragma used+
;void putchar(char c)
; 0000 0330 {
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0331 while (tx_counter_usartf0 == TX_BUFFER_SIZE_USARTF0);
;PCODE: $000001D0 VOL: 0
;	c -> Y+0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0332 #asm("cli")
;PCODE: $000001D7 VOL: 0
	cli
;PCODE: $000001D8 VOL: 0
; 0000 0333 if (tx_counter_usartf0 || ((USARTF0.STATUS & USART_DREIF_bm)==0))
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 1
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0334    {
; 0000 0335    tx_buffer_usartf0[tx_wr_index_usartf0++]=c;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0336 #if TX_BUFFER_SIZE_USARTF0 != 256
; 0000 0337    if (tx_wr_index_usartf0 == TX_BUFFER_SIZE_USARTF0) tx_wr_index_usartf0=0;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0338 #endif
; 0000 0339    ++tx_counter_usartf0;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 033A    }
; 0000 033B else
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 033C    USARTF0.DATA=c;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 1
; 0000 033D #asm("sei")
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
	sei
;PCODE: $000001F8 VOL: 0
; 0000 033E }
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;#pragma used-
;
;
;
;// DACB initialization
;void dacb_init(void)
; 0000 0345 {
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0346 // Operating mode: Single Channel (Ch0)
; 0000 0347 // Channel 0 triggered by the event system: Off
; 0000 0348 DACB.CTRLB=(DACB.CTRLB & (~(DAC_CHSEL_gm | DAC_CH0TRIG_bm | DAC_CH1TRIG_bm))) |
; 0000 0349 	DAC_CHSEL_SINGLE_gc;
;PCODE: $000001FE VOL: 1
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 1
; 0000 034A 
; 0000 034B // Reference: AREF on PORTB
; 0000 034C // Left adjust value: Off
; 0000 034D DACB.CTRLC=(DACB.CTRLC & (~(DAC_REFSEL_gm | DAC_LEFTADJ_bm))) |
; 0000 034E 	DAC_REFSEL_AREFB_gc;
;PCODE: $00000202 VOL: 1
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 1
; 0000 034F 
; 0000 0350 // DACB is enabled
; 0000 0351 // Low power mode: Off
; 0000 0352 // Channel 0 output: On
; 0000 0353 // Channel 1 output: Off
; 0000 0354 // Internal output connected to the ADCB and Analog Comparator MUX-es: Off
; 0000 0355 DACB.CTRLA=(DACB.CTRLA & (~(DAC_IDOEN_bm | DAC_CH0EN_bm | DAC_CH1EN_bm | DAC_LPMODE_bm))) |
; 0000 0356 	DAC_CH0EN_bm | DAC_ENABLE_bm;
;PCODE: $00000206 VOL: 1
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 1
; 0000 0357 }
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;
;// Function used to write data to a DACB channel ch
;void dacb_write(unsigned char ch, unsigned int data)
; 0000 035B {
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 035C register unsigned char m=ch ? DAC_CH1DRE_bm : DAC_CH0DRE_bm;
; 0000 035D // Wait for the channel data register to be ready for new data
; 0000 035E while ((DACB.STATUS & m)==0);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;	ch -> Y+3
;	data -> Y+1
;	m -> R17
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 1
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 035F // Write new data to the channel data register
; 0000 0360 if (m==DAC_CH1DRE_bm) DACB.CH1DATA=data;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 1
; 0000 0361 else DACB.CH0DATA=data;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 1
; 0000 0362 }
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;// Disable a Timer/Counter type TC0
;void tc0_disable(TC0_t *ptc)
; 0000 0365 {
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0366 // Timer/Counter off
; 0000 0367 ptc->CTRLA=TC_CLKSEL_OFF_gc;
;PCODE: $00000231 VOL: 0
;	*ptc -> Y+0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0368 // Issue a reset command
; 0000 0369 ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 036A }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;
;// Timer/Counter TCC0 initialization
;void tcc0_init(void)
; 0000 036E {
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 036F unsigned char s;
; 0000 0370 unsigned char n;
; 0000 0371 
; 0000 0372 // Note: The correct PORTC direction for the Compare Channels
; 0000 0373 // outputs is configured in the ports_init function.
; 0000 0374 
; 0000 0375 // Save interrupts enabled/disabled state
; 0000 0376 s=SREG;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0377 // Disable interrupts
; 0000 0378 #asm("cli")
;PCODE: $00000242 VOL: 0
	cli
;PCODE: $00000243 VOL: 0
; 0000 0379 
; 0000 037A // Disable and reset the timer/counter just to be sure
; 0000 037B tc0_disable(&TCC0);
;PCODE: $00000244 VOL: 1
;PCODE: $00000245 VOL: 0
; 0000 037C // Clock source: ClkPer/1
; 0000 037D TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 1
; 0000 037E // Mode: Single Slope PWM Gen., Overflow Int./Event on BOTTOM
; 0000 037F // Compare/Capture on channel A: On
; 0000 0380 // Compare/Capture on channel B: On
; 0000 0381 // Compare/Capture on channel C: On
; 0000 0382 // Compare/Capture on channel D: Off
; 0000 0383 TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (1<<TC0_CCCEN_bp) | (1<<TC0_CCBEN_bp) | (1<<TC0_CCAEN_bp) |
; 0000 0384 	TC_WGMODE_SS_gc;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 1
; 0000 0385 // Capture event source: None
; 0000 0386 // Capture event action: None
; 0000 0387 TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 1
; 0000 0388 
; 0000 0389 // Set Timer/Counter in Normal mode
; 0000 038A TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 1
; 0000 038B 
; 0000 038C // Overflow interrupt: Disabled
; 0000 038D // Error interrupt: Disabled
; 0000 038E TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 1
; 0000 038F 
; 0000 0390 // Compare/Capture channel A interrupt: Disabled
; 0000 0391 // Compare/Capture channel B interrupt: Disabled
; 0000 0392 // Compare/Capture channel C interrupt: Disabled
; 0000 0393 // Compare/Capture channel D interrupt: Disabled
; 0000 0394 TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 1
; 0000 0395 
; 0000 0396 // High resolution extension: Off
; 0000 0397 HIRESC.CTRLA&= ~HIRES_HREN0_bm;
;PCODE: $00000252 VOL: 1
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 1
; 0000 0398 
; 0000 0399 // Advanced Waveform Extension initialization
; 0000 039A // Optimize for speed
; 0000 039B #pragma optsize-
; 0000 039C // Disable locking the AWEX configuration registers just to be sure
; 0000 039D n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
;PCODE: $00000255 VOL: 1
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 039E CCP=CCP_IOREG_gc;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 039F MCU.AWEXLOCK=n;
;PCODE: $0000025A VOL: 1
;PCODE: $0000025B VOL: 0
; 0000 03A0 // Restore optimization for size if needed
; 0000 03A1 #pragma optsize_default
; 0000 03A2 
; 0000 03A3 // Pattern generation: Off
; 0000 03A4 // Common waveform channel mode: Off
; 0000 03A5 // Dead time insertion for compare channel A: Off
; 0000 03A6 // Dead time insertion for compare channel B: Off
; 0000 03A7 // Dead time insertion for compare channel C: Off
; 0000 03A8 // Dead time insertion for compare channel D: Off
; 0000 03A9 AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
; 0000 03AA 	(0<<AWEX_DTICCBEN_bp) | (0<<AWEX_DTICCAEN_bp);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 1
; 0000 03AB // Low side dead time duration [ClkPer cycles]
; 0000 03AC AWEXC.DTLS=0;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 1
; 0000 03AD // High side dead time duration [ClkPer cycles]
; 0000 03AE AWEXC.DTHS=0;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 1
; 0000 03AF // PORTC output register override
; 0000 03B0 AWEXC.OUTOVEN=0b00000000;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 1
; 0000 03B1 
; 0000 03B2 // Fault protection initialization
; 0000 03B3 // Fault detection on OCD Break detection: On
; 0000 03B4 // Fault detection restart mode: Latched Mode
; 0000 03B5 // Fault detection action: None (Fault protection disabled)
; 0000 03B6 AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0000 03B7 	(0<<AWEX_FDDBD_bp) | (0<<AWEX_FDMODE_bp) | AWEX_FDACT_NONE_gc;
;PCODE: $00000264 VOL: 1
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 1
; 0000 03B8 // Fault detect events:
; 0000 03B9 // Event channel 0: Off
; 0000 03BA // Event channel 1: Off
; 0000 03BB // Event channel 2: Off
; 0000 03BC // Event channel 3: Off
; 0000 03BD // Event channel 4: Off
; 0000 03BE // Event channel 5: Off
; 0000 03BF // Event channel 6: Off
; 0000 03C0 // Event channel 7: Off
; 0000 03C1 AWEXC.FDEMASK=0b00000000;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 1
; 0000 03C2 // Make sure the fault detect flag is cleared
; 0000 03C3 AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
;PCODE: $0000026C VOL: 1
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 1
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 03C4 
; 0000 03C5 // Clear the interrupt flags
; 0000 03C6 TCC0.INTFLAGS=TCC0.INTFLAGS;
;PCODE: $00000274 VOL: 1
;PCODE: $00000275 VOL: 1
; 0000 03C7 // Set Counter register
; 0000 03C8 TCC0.CNT=0x0000;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 1
; 0000 03C9 // Set Period register
; 0000 03CA TCC0.PER=0x013F;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 1
; 0000 03CB // Set channel A Compare/Capture register
; 0000 03CC TCC0.CCA=0x0000;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 1
; 0000 03CD // Set channel B Compare/Capture register
; 0000 03CE TCC0.CCB=0x0000;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 1
; 0000 03CF // Set channel C Compare/Capture register
; 0000 03D0 TCC0.CCC=0x0000;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 1
; 0000 03D1 // Set channel D Compare/Capture register
; 0000 03D2 TCC0.CCD=0x0000;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 1
; 0000 03D3 
; 0000 03D4 // Restore interrupts enabled/disabled state
; 0000 03D5 SREG=s;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 03D6 }
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;
;
;
;// Function used to read the calibration byte from the
;// signature row, specified by 'index'
;#pragma optsize-
;unsigned char read_calibration_byte(unsigned char index)
; 0000 03DE {
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 03DF unsigned char r;
; 0000 03E0 NVM.CMD=NVM_CMD_READ_CALIB_ROW_gc;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;	index -> Y+1
;	r -> R17
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 1
; 0000 03E1 r=*((flash unsigned char*) index);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 03E2 // Clean up NVM command register
; 0000 03E3 NVM.CMD=NVM_CMD_NO_OPERATION_gc;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 1
; 0000 03E4 return r;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 03E5 }
;PCODE: $00000297 VOL: 0
;#pragma optsize_default
;// ADCA initialization
;void adca_init(void)
; 0000 03E9 {
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 03EA // ADCA is enabled
; 0000 03EB // Resolution: 12 Bits
; 0000 03EC // Load the calibration value for 12 Bit resolution
; 0000 03ED // from the signature row
; 0000 03EE ADCA.CALL=read_calibration_byte(PROD_SIGNATURES_START+ADCACAL0_offset);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 1
; 0000 03EF ADCA.CALH=read_calibration_byte(PROD_SIGNATURES_START+ADCACAL1_offset);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 1
; 0000 03F0 
; 0000 03F1 // Free Running mode: Off
; 0000 03F2 // Gain stage impedance mode: High-impedance sources
; 0000 03F3 // Current consumption: No limit
; 0000 03F4 // Conversion mode: Unsigned
; 0000 03F5 ADCA.CTRLB=(0<<ADC_IMPMODE_bp) | ADC_CURRLIMIT_NO_gc | (0<<ADC_CONMODE_bp) | ADC_RESOLUTION_12BIT_gc;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 1
; 0000 03F6 
; 0000 03F7 // Clock frequency: 2000.000 kHz
; 0000 03F8 ADCA.PRESCALER=ADC_PRESCALER_DIV16_gc;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 1
; 0000 03F9 
; 0000 03FA // Reference: AREF pin on PORTA
; 0000 03FB // Temperature reference: Off
; 0000 03FC ADCA.REFCTRL=ADC_REFSEL_AREFA_gc | (0<<ADC_TEMPREF_bp) | (0<<ADC_BANDGAP_bp);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 1
; 0000 03FD 
; 0000 03FE // Initialize the ADC Compare register
; 0000 03FF ADCA.CMPL=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 1
; 0000 0400 ADCA.CMPH=0x00;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 1
; 0000 0401 
; 0000 0402 // ADC channel 0 gain: 1
; 0000 0403 // ADC channel 0 input mode: Single-ended positive input signal
; 0000 0404 ADCA.CH0.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 1
; 0000 0405 
; 0000 0406 // ADC channel 0 positive input: ADC1 pin
; 0000 0407 // ADC channel 0 negative input: GND
; 0000 0408 ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN1_gc;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 1
; 0000 0409 
; 0000 040A // ADC channel 1 gain: 1
; 0000 040B // ADC channel 1 input mode: Single-ended positive input signal
; 0000 040C ADCA.CH1.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 1
; 0000 040D 
; 0000 040E // ADC channel 1 positive input: ADC2 pin
; 0000 040F // ADC channel 1 negative input: GND
; 0000 0410 ADCA.CH1.MUXCTRL=ADC_CH_MUXPOS_PIN2_gc;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 1
; 0000 0411 
; 0000 0412 // ADC channel 2 gain: 1
; 0000 0413 // ADC channel 2 input mode: Single-ended positive input signal
; 0000 0414 ADCA.CH2.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 1
; 0000 0415 
; 0000 0416 // ADC channel 2 positive input: ADC3 pin
; 0000 0417 // ADC channel 2 negative input: GND
; 0000 0418 ADCA.CH2.MUXCTRL=ADC_CH_MUXPOS_PIN3_gc;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 1
; 0000 0419 
; 0000 041A // ADC channel 3 gain: 1
; 0000 041B // ADC channel 3 input mode: Single-ended positive input signal
; 0000 041C ADCA.CH3.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 1
; 0000 041D 
; 0000 041E // ADC channel 3 positive input: ADC4 pin
; 0000 041F // ADC channel 3 negative input: GND
; 0000 0420 ADCA.CH3.MUXCTRL=ADC_CH_MUXPOS_PIN4_gc;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 1
; 0000 0421 
; 0000 0422 // AD conversion is started by software
; 0000 0423 ADCA.EVCTRL=ADC_EVACT_NONE_gc;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 1
; 0000 0424 
; 0000 0425 // Channel 0 interrupt: Disabled
; 0000 0426 ADCA.CH0.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 1
; 0000 0427 // Channel 1 interrupt: Disabled
; 0000 0428 ADCA.CH1.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 1
; 0000 0429 // Channel 2 interrupt: Disabled
; 0000 042A ADCA.CH2.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 1
; 0000 042B // Channel 3 interrupt: Disabled
; 0000 042C ADCA.CH3.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 1
; 0000 042D 
; 0000 042E // Enable the ADC
; 0000 042F ADCA.CTRLA|=ADC_ENABLE_bm;
;PCODE: $000002C4 VOL: 1
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 1
; 0000 0430 // Insert a delay to allow the ADC common mode voltage to stabilize
; 0000 0431 delay_us(2);
;PCODE: $000002C7 VOL: 0
; 0000 0432 }
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;
;// ADCA channel data read function using polled mode
;unsigned int adca_read(unsigned char channel)
; 0000 0436 {
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0437 ADC_CH_t *pch=&ADCA.CH0+channel;
; 0000 0438 unsigned int data;
; 0000 0439 
; 0000 043A // Start the AD conversion
; 0000 043B pch->CTRL|= 1<<ADC_CH_START_bp;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;	channel -> Y+4
;	*pch -> R16,R17
;	data -> R18,R19
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 1
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 043C // Wait for the AD conversion to complete
; 0000 043D while ((pch->INTFLAGS & ADC_CH_CHIF_bm)==0);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 043E // Clear the interrupt flag
; 0000 043F pch->INTFLAGS=ADC_CH_CHIF_bm;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0440 // Read the AD conversion result
; 0000 0441 ((unsigned char *) &data)[0]=pch->RESL;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0442 ((unsigned char *) &data)[1]=pch->RESH;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0443 return data;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0444 }
;PCODE: $000002ED VOL: 0
;
;// ADCA sweeped channel(s) data read function
;// for software triggered mode
;void adca_sweep_read(unsigned char nch, unsigned int *pdata)
; 0000 0449 {
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 044A ADC_CH_t *pch=&ADCA.CH0;
; 0000 044B unsigned char i,j,m;
; 0000 044C 
; 0000 044D // Sweep starts with channel 0
; 0000 044E j=ADC_CH0START_bm;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;	nch -> Y+8
;	*pdata -> Y+6
;	*pch -> R16,R17
;	i -> R19
;	j -> R18
;	m -> R21
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 044F // Prepare the AD conversion start mask for the sweeped channel(s)
; 0000 0450 m=0;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0451 i=0;
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0452 do
;PCODE: $000002FA VOL: 0
; 0000 0453   {
; 0000 0454   m|=j;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0455   j<<=1;
;PCODE: $000002FD VOL: 0
; 0000 0456   }
; 0000 0457 while (++i<nch);
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0458 // Ensure the interrupt flags are cleared
; 0000 0459 ADCA.INTFLAGS=ADCA.INTFLAGS;
;PCODE: $00000306 VOL: 1
;PCODE: $00000307 VOL: 1
; 0000 045A // Start the AD conversion for the sweeped channel(s)
; 0000 045B ADCA.CTRLA=(ADCA.CTRLA & (ADC_DMASEL_gm | ADC_FLUSH_bm | ADC_ENABLE_bm)) | m;
;PCODE: $00000308 VOL: 1
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 1
; 0000 045C // Read and store the AD conversion results for all the sweeped channels
; 0000 045D for (i=0; i<nch; i++)
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 045E     {
; 0000 045F     // Wait for the AD conversion to complete
; 0000 0460     while ((pch->INTFLAGS & ADC_CH_CHIF_bm)==0);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 0461     // Clear the interrupt flag
; 0000 0462     pch->INTFLAGS=ADC_CH_CHIF_bm;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 0463     // Read the AD conversion result
; 0000 0464     ((unsigned char *) pdata)[0]=pch->RESL;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0465     ((unsigned char *) pdata)[1]=pch->RESH;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0466     pdata++;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0467     pch++;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0468     }
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0469 }
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;
;// ADCB initialization
;void adcb_init(void)
; 0000 046D {
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 046E // ADCB is enabled
; 0000 046F // Resolution: 12 Bits
; 0000 0470 // Load the calibration value for 12 Bit resolution
; 0000 0471 // from the signature row
; 0000 0472 ADCB.CALL=read_calibration_byte(PROD_SIGNATURES_START+ADCBCAL0_offset);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 1
; 0000 0473 ADCB.CALH=read_calibration_byte(PROD_SIGNATURES_START+ADCBCAL1_offset);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 1
; 0000 0474 
; 0000 0475 // Free Running mode: Off
; 0000 0476 // Gain stage impedance mode: High-impedance sources
; 0000 0477 // Current consumption: No limit
; 0000 0478 // Conversion mode: Unsigned
; 0000 0479 ADCB.CTRLB=(0<<ADC_IMPMODE_bp) | ADC_CURRLIMIT_NO_gc | (0<<ADC_CONMODE_bp) | ADC_RESOLUTION_12BIT_gc;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 1
; 0000 047A 
; 0000 047B // Clock frequency: 2000.000 kHz
; 0000 047C ADCB.PRESCALER=ADC_PRESCALER_DIV16_gc;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 1
; 0000 047D 
; 0000 047E // Reference: AREF pin on PORTA
; 0000 047F // Temperature reference: On
; 0000 0480 ADCB.REFCTRL=ADC_REFSEL_AREFA_gc | (1<<ADC_TEMPREF_bp) | (0<<ADC_BANDGAP_bp);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 1
; 0000 0481 
; 0000 0482 // Initialize the ADC Compare register
; 0000 0483 ADCB.CMPL=0x00;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 1
; 0000 0484 ADCB.CMPH=0x00;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 1
; 0000 0485 
; 0000 0486 // ADC channel 0 gain: 1
; 0000 0487 // ADC channel 0 input mode: Single-ended positive input signal
; 0000 0488 ADCB.CH0.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 1
; 0000 0489 
; 0000 048A // ADC channel 0 positive input: ADC1 pin
; 0000 048B // ADC channel 0 negative input: GND
; 0000 048C ADCB.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN1_gc;
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 1
; 0000 048D 
; 0000 048E // ADC channel 1 gain: 1
; 0000 048F // ADC channel 1 input mode: Single-ended positive input signal
; 0000 0490 ADCB.CH1.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 1
; 0000 0491 
; 0000 0492 // ADC channel 1 positive input: ADC3 pin
; 0000 0493 // ADC channel 1 negative input: GND
; 0000 0494 ADCB.CH1.MUXCTRL=ADC_CH_MUXPOS_PIN3_gc;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 1
; 0000 0495 
; 0000 0496 // ADC channel 2 gain: 1
; 0000 0497 // ADC channel 2 input mode: Internal positive input signal
; 0000 0498 ADCB.CH2.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_INTERNAL_gc;
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 1
; 0000 0499 
; 0000 049A // ADC channel 2 positive input: Temp. Reference
; 0000 049B // ADC channel 2 negative input: GND
; 0000 049C ADCB.CH2.MUXCTRL=ADC_CH_MUXINT_TEMP_gc;
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 1
; 0000 049D 
; 0000 049E // ADC channel 3 gain: 1
; 0000 049F // ADC channel 3 input mode: Internal positive input signal
; 0000 04A0 ADCB.CH3.CTRL=(0<<ADC_CH_START_bp) | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_INTERNAL_gc;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 1
; 0000 04A1 
; 0000 04A2 // ADC channel 3 positive input: Temp. Reference
; 0000 04A3 // ADC channel 3 negative input: GND
; 0000 04A4 ADCB.CH3.MUXCTRL=ADC_CH_MUXINT_TEMP_gc;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 1
; 0000 04A5 
; 0000 04A6 // AD conversion is started by software
; 0000 04A7 ADCB.EVCTRL=ADC_EVACT_NONE_gc;
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 1
; 0000 04A8 
; 0000 04A9 // Channel 0 interrupt: Disabled
; 0000 04AA ADCB.CH0.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 1
; 0000 04AB // Channel 1 interrupt: Disabled
; 0000 04AC ADCB.CH1.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 1
; 0000 04AD // Channel 2 interrupt: Disabled
; 0000 04AE ADCB.CH2.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 1
; 0000 04AF // Channel 3 interrupt: Disabled
; 0000 04B0 ADCB.CH3.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 1
; 0000 04B1 
; 0000 04B2 // Enable the ADC
; 0000 04B3 ADCB.CTRLA|=ADC_ENABLE_bm;
;PCODE: $00000362 VOL: 1
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 1
; 0000 04B4 // Insert a delay to allow the ADC common mode voltage to stabilize
; 0000 04B5 delay_us(2);
;PCODE: $00000365 VOL: 0
; 0000 04B6 }
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;
;// ADCB channel data read function using polled mode
;unsigned int adcb_read(unsigned char channel)
; 0000 04BA {
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 04BB ADC_CH_t *pch=&ADCB.CH0+channel;
; 0000 04BC unsigned int data;
; 0000 04BD 
; 0000 04BE // Start the AD conversion
; 0000 04BF pch->CTRL|= 1<<ADC_CH_START_bp;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;	channel -> Y+4
;	*pch -> R16,R17
;	data -> R18,R19
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 1
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 04C0 // Wait for the AD conversion to complete
; 0000 04C1 while ((pch->INTFLAGS & ADC_CH_CHIF_bm)==0);
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 04C2 // Clear the interrupt flag
; 0000 04C3 pch->INTFLAGS=ADC_CH_CHIF_bm;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 04C4 // Read the AD conversion result
; 0000 04C5 ((unsigned char *) &data)[0]=pch->RESL;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 04C6 ((unsigned char *) &data)[1]=pch->RESH;
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 04C7 return data;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 04C8 }
;PCODE: $0000038B VOL: 0
;
;// ADCB sweeped channel(s) data read function
;// for software triggered mode
;void adcb_sweep_read(unsigned char nch, unsigned int *pdata)
; 0000 04CD {
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 04CE ADC_CH_t *pch=&ADCB.CH0;
; 0000 04CF unsigned char i,j,m;
; 0000 04D0 
; 0000 04D1 // Sweep starts with channel 0
; 0000 04D2 j=ADC_CH0START_bm;
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;	nch -> Y+8
;	*pdata -> Y+6
;	*pch -> R16,R17
;	i -> R19
;	j -> R18
;	m -> R21
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 04D3 // Prepare the AD conversion start mask for the sweeped channel(s)
; 0000 04D4 m=0;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 04D5 i=0;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 04D6 do
;PCODE: $00000398 VOL: 0
; 0000 04D7   {
; 0000 04D8   m|=j;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 04D9   j<<=1;
;PCODE: $0000039B VOL: 0
; 0000 04DA   }
; 0000 04DB while (++i<nch);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 04DC // Ensure the interrupt flags are cleared
; 0000 04DD ADCB.INTFLAGS=ADCB.INTFLAGS;
;PCODE: $000003A4 VOL: 1
;PCODE: $000003A5 VOL: 1
; 0000 04DE // Start the AD conversion for the sweeped channel(s)
; 0000 04DF ADCB.CTRLA=(ADCB.CTRLA & (ADC_DMASEL_gm | ADC_FLUSH_bm | ADC_ENABLE_bm)) | m;
;PCODE: $000003A6 VOL: 1
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 1
; 0000 04E0 // Read and store the AD conversion results for all the sweeped channels
; 0000 04E1 for (i=0; i<nch; i++)
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 04E2     {
; 0000 04E3     // Wait for the AD conversion to complete
; 0000 04E4     while ((pch->INTFLAGS & ADC_CH_CHIF_bm)==0);
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 04E5     // Clear the interrupt flag
; 0000 04E6     pch->INTFLAGS=ADC_CH_CHIF_bm;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 04E7     // Read the AD conversion result
; 0000 04E8     ((unsigned char *) pdata)[0]=pch->RESL;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 04E9     ((unsigned char *) pdata)[1]=pch->RESH;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 04EA     pdata++;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 04EB     pch++;
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 04EC     }
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 04ED }
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;
;void main(void)
; 0000 04F0 {
;PCODE: $000003D4 VOL: 0
; 0000 04F1 // Declare your local variables here
; 0000 04F2 unsigned char n;
; 0000 04F3 int i;
; 0000 04F4 unsigned int ADCA_data,ai;
; 0000 04F5 unsigned char send_data[14];
; 0000 04F6 unsigned char data_DIG;
; 0000 04F7 
; 0000 04F8 // Interrupt system initialization
; 0000 04F9 // Optimize for speed
; 0000 04FA #pragma optsize-
; 0000 04FB // Make sure the interrupts are disabled
; 0000 04FC #asm("cli")
;PCODE: $000003D5 VOL: 0
;	n -> R17
;	i -> R18,R19
;	ADCA_data -> R20,R21
;	ai -> Y+14
;	send_data -> Y+0
;	data_DIG -> R16
;PCODE: $000003D6 VOL: 0
	cli
;PCODE: $000003D7 VOL: 0
; 0000 04FD // Low level interrupt: Off
; 0000 04FE // Round-robin scheduling for low level interrupt: Off
; 0000 04FF // Medium level interrupt: On
; 0000 0500 // High level interrupt: On
; 0000 0501 // The interrupt vectors will be placed at the start of the Application FLASH section
; 0000 0502 n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
; 0000 0503     PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
;PCODE: $000003D8 VOL: 1
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 0504 CCP=CCP_IOREG_gc;
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 0505 PMIC.CTRL=n;
;PCODE: $000003DE VOL: 1
;PCODE: $000003DF VOL: 0
; 0000 0506 // Set the default priority for round-robin scheduling
; 0000 0507 PMIC.INTPRI=0x00;
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 1
; 0000 0508 // Restore optimization for size if needed
; 0000 0509 #pragma optsize_default
; 0000 050A 
; 0000 050B // System clocks initialization
; 0000 050C system_clocks_init();
;PCODE: $000003E2 VOL: 0
; 0000 050D 
; 0000 050E // Event system initialization
; 0000 050F event_system_init();
;PCODE: $000003E3 VOL: 0
; 0000 0510 
; 0000 0511 // Ports initialization
; 0000 0512 ports_init();
;PCODE: $000003E4 VOL: 0
; 0000 0513 
; 0000 0514 // Virtual Ports initialization
; 0000 0515 vports_init();
;PCODE: $000003E5 VOL: 0
; 0000 0516 
; 0000 0517 // USARTF0 initialization
; 0000 0518 usartf0_init();
;PCODE: $000003E6 VOL: 0
; 0000 0519 
; 0000 051A dacb_init();
;PCODE: $000003E7 VOL: 0
; 0000 051B 
; 0000 051C tcc0_init();
;PCODE: $000003E8 VOL: 0
; 0000 051D 
; 0000 051E adca_init();
;PCODE: $000003E9 VOL: 0
; 0000 051F adcb_init();
;PCODE: $000003EA VOL: 0
; 0000 0520 
; 0000 0521 // Globally enable interrupts
; 0000 0522 #asm("sei")
;PCODE: $000003EB VOL: 0
	sei
;PCODE: $000003EC VOL: 0
; 0000 0523 
; 0000 0524 while (1)
;PCODE: $000003ED VOL: 0
; 0000 0525       {
; 0000 0526            if(flag)
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0527            {
; 0000 0528            flag=0;
;PCODE: $000003F0 VOL: 0
; 0000 0529            DAC_data = (requ_buffer[1]*256)+requ_buffer[2];//dac init
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 052A 
; 0000 052B            for(i=0;i<=11;i++)
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 052C            putchar(requ_buffer[i]);
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 052E dacb_write(0,DAC_data);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 052F 
; 0000 0530            TCC0.CCA = ((requ_buffer[3]*256)+requ_buffer[4])/12.84;//PWM A init
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 1
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0531            TCC0.CCB = ((requ_buffer[5]*256)+requ_buffer[6])/12.84;//PWM B init
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 1
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0532            TCC0.CCC = ((requ_buffer[7]*256)+requ_buffer[8])/12.84;//PWM C init
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 1
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0533            PORTE.OUT = ((requ_buffer[9]<<4)&0xF0)|((requ_buffer[10]>>4&0X0F));
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 1
; 0000 0534            if(requ_buffer[10]&0X01)
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 0535            PORTD.OUTSET = 0X10;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 1
; 0000 0536            else
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0537            PORTD.OUTCLR = 0X10;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 1
; 0000 0538            if(requ_buffer[10]&0X02)
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0539            PORTD.OUTSET = 0X20;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 1
; 0000 053A            else
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 053B            PORTD.OUTCLR = 0X20;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 1
; 0000 053C            if(requ_buffer[10]&0X04)
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 053D            PORTD.OUTSET = 0X40;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 1
; 0000 053E            else
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 053F            PORTD.OUTCLR = 0X40;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 1
; 0000 0540            if(requ_buffer[10]&0X08)
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0541            PORTD.OUTSET = 0X80;
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 1
; 0000 0542            else
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0543            PORTD.OUTCLR = 0X80;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 1
; 0000 0544 
; 0000 0545 
; 0000 0546            for(i=0x01;i<=0x08;i=i*2)
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 0547             {
; 0000 0548            if(requ_buffer[10]&i)
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0549            PORTD.OUTSET = i*16;
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 1
; 0000 054A            else
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 054B            PORTD.OUTCLR = i*16;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 1
; 0000 054C             }
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 054D 
; 0000 054E            PORTD.OUT |= ((requ_buffer[10]<<4)&0xF0);
;PCODE: $00000498 VOL: 1
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 054F //            PORTD.OUT = (0xFF);
; 0000 0550 
; 0000 0551 
; 0000 0552 
; 0000 0553            putchar(0xCC);
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0554            ADCA_data = adca_read(0);
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0555            send_data[0] = ADCA_data>>8 ;
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0556            send_data[1] = ADCA_data ;
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 0557 
; 0000 0558            ADCA_data = adca_read(1);
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 0559            send_data[2] = ADCA_data>>8 ;
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 055A            send_data[3] = ADCA_data ;
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0000 055B 
; 0000 055C            ADCA_data = adca_read(2);
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 055D            send_data[4] = ADCA_data>>8 ;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 055E            send_data[5] = ADCA_data ;
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 055F 
; 0000 0560            ADCA_data = adca_read(3);
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0561            send_data[6] = ADCA_data>>8 ;
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 0562            send_data[7] = ADCA_data ;
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0563 
; 0000 0564            ADCA_data = adcb_read(0);
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0565            send_data[8] = ADCA_data>>8 ;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 0566            send_data[9] = ADCA_data ;
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 0567 
; 0000 0568            ADCA_data = adcb_read(1);
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0569            send_data[10] = ADCA_data>>8 ;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 056A            send_data[11] = ADCA_data ;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 056B            //output ports
; 0000 056C            send_data[12] = ((PORTB.IN&0XF0)>>4);
;PCODE: $000004CE VOL: 1
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 056D            send_data[13] = (PORTC.IN&0XF0);
;PCODE: $000004D3 VOL: 1
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
; 0000 056E            send_data[13] |= (PORTD.IN&0X0F);
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 1
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 056F 
; 0000 0570            for(ai=0;ai<=13;ai++)
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 0571            {
; 0000 0572             putchar(send_data[ai]);
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 0573            }
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 0574 
; 0000 0575            putchar(0xDD);
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 0576               }
; 0000 0577       }
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0578 }
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
